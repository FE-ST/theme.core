/*
 * There is color constants (of dynamic colors)
 */

//
@use "sass:string";
@use "sass:meta";

//
@use "ColorUtils" as cu;
@use "ColorMixins" as cm;

//
@layer u2-colors {

    //
    @property --theme-wallpaper-is-dark {
        syntax: "<number>"; initial-value: 0; inherits: true;
    }

    //
    @property --theme-chroma-mixed { syntax: "<color>"; initial-value: white; inherits: true; };

    //
    @property --theme-black-mod { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --theme-white-mod { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --theme-is-dark { syntax: "<number>"; inherits: true; initial-value: 0; }
    @property --theme-dark-up-mod   { syntax: "<color>"; inherits: true; initial-value: black; }
    @property --theme-dark-down-mod { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --theme-light-up-mod   { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --theme-light-down-mod { syntax: "<color>"; inherits: true; initial-value: black; }
    @property --theme-chroma-mod { syntax: "<color>"; inherits: true; initial-value: red; }
    @property --theme-up-mod { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --theme-down-mod { syntax: "<color>"; inherits: true; initial-value: black; }
    @property --theme-accent-dark { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --theme-accent-light { syntax: "<color>"; initial-value: white; inherits: true; };

    //
    @property --theme-highlight-color { syntax: "<color>"; inherits: true; initial-value: transparent; }
    @property --theme-accent-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-base-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-dynamic-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-glyph-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --theme-surface-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --current-glyph-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --current-surface-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --current-chroma-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --current-accent-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --highlight-coefficient { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --highlight-coefficient-hover { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --highlight-coefficient-state { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --accent-glyph-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --accent-surface-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --contrast-glyph-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --contrast-surface-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --adaptive-surface-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-base-accent-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-accent-base-color { syntax: "<color>"; initial-value: white; inherits: true; };

    //
    @property --theme-solid-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --theme-accent-chroma { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --theme-surface-alpha { syntax: "<number>"; initial-value: 0; inherits: true; };

    //
    @property --icon-size {
        syntax: "<length-percentage>";
        initial-value: 100%;
        inherits: true;
    }

    //
    :root, :where(html) {
        --range-slider:          #{cu.theme-mod-up(cu.$baseColor, 90%)};; /* slider main background color */
        --range-handle-inactive: #{cu.theme-mod-up(cu.$baseColor, 80%)};; /* inactive handle color */
        --range-handle:          #{cu.theme-mod-up(cu.$baseColor, 20%)};; /* non-focussed handle color */
        --range-handle-focus:    #{cu.theme-mod-up(cu.$baseColor, 10%)}; /* focussed handle color */
        --range-handle-border:   var(--range-handle); /* handle border color */
        --range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
        --range-range:           var(--range-handle-focus); /* active range background color */
        --range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
        --range-float:           var(--range-handle-focus); /* floating label background color */
        --range-float-text:      #{cu.theme-mod-up(cu.$baseColor, 100%)};; /* text color on floating label */
    }

    //
    :root, :scope, :host {
        --theme-surface-alpha: 0;
        --theme-accent-chroma: 0;
        --theme-dynamic-color: var(--theme-surface-color, currentColor);
        --theme-dynamic-color: var(--adaptive-surface-color, currentColor);
        --highlight-coefficient-state: 0.0;
        --highlight-coefficient-hover: var(--highlight-coefficient-state, 0.0);
        @include cm.bg-dep;
    }

    //
    :root, :where(html) {
        //
        & {
            --theme-is-dark: 0; color-scheme: light;
            --theme-surface-alpha: 0;
            --theme-accent-chroma: 0;
            --theme-accent-color: var(--theme-accent-base-color);
            --theme-chroma-color: var(--theme-accent-color);
            --highlight-coefficient: max(max(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
            --highlight-coefficient-state: 0.0;
            --highlight-coefficient-hover: var(--highlight-coefficient-state, 0.0);
            --accent-surface-color: var(--theme-accent-color);
            --theme-dynamic-color: var(--theme-base-color, currentColor);//var(--theme-accent-color, transparent);
            --theme-dynamic-color: var(--adaptive-surface-color, currentColor);
        };

        //
        &[data-highlight-op="min"] {
            //--highlight-coefficient-hover: 0.0;
            //--highlight-coefficient-state: var(--highlight-coefficient-hover, 0.0);
            --highlight-coefficient: max(min(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
        }

        //
        &, :where(body) {
            @include cm.solid;
            @include cm.highlight-color;

            //
            @include cu.contrast-inverse("--accent-glyph-color", cu.$baseColor);
            @include cu.contrast-inverse("--contrast-surface-color", "var(--theme-glyph-color, transparent)");
            @include cu.contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");
        }

        //
        @media (prefers-color-scheme: light) { --theme-is-dark: 0; color-scheme: light; }
        @media (prefers-color-scheme: dark)  { --theme-is-dark: 1; color-scheme: dark; }
    }

    //
    :root, :host, :scope, :where(html, body, *) {
        &,
        &::before, &::after, &::selection, &::slotted(*),
        & :where(*)
        {
            //
            --current-surface-color: color-mix(in oklch, var(--theme-highlight-color, black) calc(var(--highlight-coefficient, 0) * 1%), var(--theme-surface-color, white));
            //--current-surface-color: var(--theme-surface-color, inherit);
            --current-glyph-color: var(--theme-glyph-color, black);
            --current-accent-color: var(--theme-accent-color, white);
            --current-chroma-color: var(--theme-chroma-color, white);

            //
            --theme-chroma-mod: oklch(from #{cu.$baseColor} l 0.99 h);
            --theme-black-mod: oklch(from #{cu.$baseColor} 0.01 0.01 h);
            --theme-white-mod: oklch(from #{cu.$baseColor} 0.99 0.01 h);
            --theme-accent-color: var(--theme-accent-base-color);
            --theme-surface-color: oklch(from var(--theme-chroma-mixed) l c h / var(--theme-surface-alpha));

            //
            --theme-dark-down-mod: color-mix(in oklch, var(--theme-white-mod) 90%, #{cu.$baseColor});
            --theme-dark-up-mod: color-mix(in oklch, var(--theme-black-mod) 98%, #{cu.$baseColor});

            //
            --theme-light-down-mod: color-mix(in oklch, var(--theme-black-mod) 90%, #{cu.$baseColor});
            --theme-light-up-mod: color-mix(in oklch, var(--theme-white-mod) 98%, #{cu.$baseColor});

            //
            --theme-accent-dark : oklch(from var(--theme-base-color) min(min(calc(1.0 - l), l), 0.4) min(c, 0.8) h);
            --theme-accent-light: oklch(from var(--theme-base-color) max(max(calc(1.0 - l), l), 0.6) min(c, 0.8) h);
            --theme-chroma-mixed: color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), var(--theme-solid-color));

            //
            --highlight-coefficient: max(max(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
            --highlight-coefficient-state: 0.0;
            --highlight-coefficient-hover: var(--highlight-coefficient-state, 0.0);
            --highlight-transition-duration: 0.2s;
            --highlight-transition-mode: linear;
            --highlight-transition-property: --highlight-coefficient;

            //
            transition: var(--highlight-transition-property) var(--highlight-transition-duration) var(--highlight-transition-mode);
            background-color: var(--current-surface-color, currentColor);
            accent-color: var(--current-glyph-color); //--theme-accent-base-color
            color: var(--current-glyph-color);
            stroke: var(--current-glyph-color);

            // scrollbar styling
            scrollbar-color: var(--current-glyph-color);
            scrollbar-width: thin;

            //
            @include cm.highlight-color;
            @include cu.theme-dependent("--theme-up-mod", "var(--theme-light-up-mod)", "var(--theme-dark-up-mod)");
            @include cu.theme-dependent("--theme-down-mod", "var(--theme-light-down-mod)", "var(--theme-dark-down-mod)");
            @include cm.bg-dep;
        }

        //
        &[data-highlight-op="min"] {
            //--highlight-coefficient-hover: 0.0;
            //--highlight-coefficient-state: var(--highlight-coefficient-hover, 0.0);
            --highlight-coefficient: max(min(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
        }

        //
        &:where(a, span, svg, ui-icon, ui-shaped, ui-task), & :where(a, span, svg, ui-icon, ui-shaped, ui-task) {
            background-color: transparent;
            stroke: var(--current-glyph-color);
            color: var(--current-glyph-color);
            @include cm.bg-dep;
        }

        //
        &::selection, ::selection {
            //color: white;
            //color: var(--current-surface-color, white);
            //background-color: black;
            background-color: var(--current-glyph-color, black);
            color: oklch(from var(--current-glyph-color, black) calc(1 - l) c h / 1.0);
        }

        //
        &:where(slot), :where(slot) {
            background-color: transparent !important;
        }
    }

    //
    :where([data-highlight-hover], [data-highlight]) *:not([data-highlight], [data-highlight-hover]) {
        @include cm.highlight-color;

        //
        & {
            --highlight-coefficient: max(max(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
            --highlight-coefficient-state: 0;
            --highlight-coefficient-hover: var(--highlight-coefficient-state, 0.0);
        }

        //
        &[data-highlight-op="min"] {
            --highlight-coefficient: max(min(var(--highlight-coefficient-state, 0), var(--highlight-coefficient-hover, 0)), 0);
            //--highlight-coefficient-hover: 0.0;
            //--highlight-coefficient-state: var(--highlight-coefficient-hover, 0.0);
        }
    }

    //
    *[data-transparent]:not([data-transparent="false"]) {
        @include cm.transparent-mode;
    }

    //
    :where([data-scheme]) *:not([data-scheme]) {
        //@include cm.solid;
        @include cm.transparent-mode;
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="dark"]  {
        & { --theme-is-dark: 1; color-scheme: dark; };
        @include cu.theme-dependent("--theme-up-mod", "var(--theme-light-up-mod)", "var(--theme-dark-up-mod)");
        @include cu.theme-dependent("--theme-down-mod", "var(--theme-light-down-mod)", "var(--theme-dark-down-mod)");
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="light"] {
        & { --theme-is-dark: 0; color-scheme: light; };
        @include cu.theme-dependent("--theme-up-mod", "var(--theme-light-up-mod)", "var(--theme-dark-up-mod)");
        @include cu.theme-dependent("--theme-down-mod", "var(--theme-light-down-mod)", "var(--theme-dark-down-mod)");
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="native"] {
        //
        & { color-scheme: normal; };
        @media (prefers-color-scheme: light) { --theme-is-dark: 0; color-scheme: light; };
        @media (prefers-color-scheme: dark)  { --theme-is-dark: 1; color-scheme: dark; };

        //
        @include cu.theme-dependent("--theme-up-mod", "var(--theme-light-up-mod)", "var(--theme-dark-up-mod)");
        @include cu.theme-dependent("--theme-down-mod", "var(--theme-light-down-mod)", "var(--theme-dark-down-mod)");
    }

    //
    *[data-scheme="dynamic"]             { @include cm.dynamic;        & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; }
    *[data-scheme="accent"]              { @include cm.accent;         & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; } // deprecated...
    *[data-scheme="solid"]               { @include cm.solid;          & { --theme-accent-chroma: 0; --theme-surface-alpha: 1; }; }
    *[data-scheme="inverse"]             { @include cm.inverse;        & { --theme-accent-chroma: 0; --theme-surface-alpha: 1; }; }
    *[data-scheme="accent-inverse"]      { @include cm.accent-inverse; & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; }
    *[data-scheme="transparent"]         { @include cm.accent;         & { --theme-accent-chroma: 1; --theme-surface-alpha: 0; }; }
    *[data-scheme="solid-transparent"]   { @include cm.solid;          & { --theme-accent-chroma: 0; --theme-surface-alpha: 0; }; }
    *[data-scheme="dynamic-transparent"] { @include cm.dynamic;        & { --theme-accent-chroma: 1; --theme-surface-alpha: 0; }; }

    //
    @function hl-logic($value) { @return "calc(#{$value} * 3)"; };

    //
    @include cu.attr-based("*[data-highlight]", "--highlight-coefficient-state", "data-highlight", "number", meta.get-function("hl-logic"), 0);
    @include cu.attr-based("*[data-chroma]", "--theme-accent-chroma", "data-chroma", "number", null, 0);
    @include cu.attr-based("*[data-alpha]", "--theme-surface-alpha", "data-alpha", "number", null, 0);

    //
    @include cu.hover("*[data-highlight-hover]") {
        @include cu.attr-based("&", "--highlight-coefficient-hover", "data-highlight-hover", "number", meta.get-function("hl-logic"), 0);
    }

    //
    :where(u-scrollbox, ui-scrollbox) {
        --scrollbar-color: var(--current-glyph-color);
    }
}
