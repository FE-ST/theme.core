/*
 * There is color constants (of dynamic colors)
 */

//
@use "sass:meta";
@use "ColorMixins" as cm;

//
@scope(:root, :host, :scope)
{
    @property --wp-mode { syntax: "<number>"; initial-value: 0; inherits: true; }

    //
    @property --tm-ac-dark { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-cr-dark { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-ac-light { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-cr-light { syntax: "<color>"; initial-value: white; inherits: true; };

    //
    @property --tm-d-hi   { syntax: "<color>"; inherits: true; initial-value: black; }
    @property --tm-d-lo { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --tm-l-hi   { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --tm-l-lo { syntax: "<color>"; inherits: true; initial-value: black; }
    @property --tm-hi { syntax: "<color>"; inherits: true; initial-value: white; }
    @property --tm-lo { syntax: "<color>"; inherits: true; initial-value: black; }

    //
    @property --tm-scheme { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --tm-chroma { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --rv-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-color { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-alpha { syntax: "<number>"; initial-value: 1; inherits: true; };
    @property --tm-bg-base { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --rv-bg-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --tm-bg-color { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --tm-bg-alpha { syntax: "<number>"; initial-value: 0; inherits: true; };

    //
    @property --tm-cr { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --tm-ac { syntax: "<color>"; initial-value: white; inherits: true; };
    @property --hl-co { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --hl-co-hover { syntax: "<number>"; initial-value: 0; inherits: true; };
    @property --hl-co-state { syntax: "<number>"; initial-value: 0; inherits: true; };

    //
    @property --tm-adapt { syntax: "<color>"; initial-value: black; inherits: true; };
    @property --tm-shade { syntax: "<color>"; inherits: true; initial-value: transparent; }
    @property --tm-origin { syntax: "<color>"; initial-value: white; inherits: true; };

    //
    @property --icon-size {
        syntax: "<length-percentage>";
        initial-value: 100%;
        inherits: true;
    }

};

//
@layer u2-colors {
    @layer u2-color-normalize, u2-color-base, u2-color-theme, u2-color-mod, u2-color-transparent, u2-color-hl, u2-color-attr, u2-style-apply, u2-icon-style-fix;
};

//
@layer u2-color-normalize {
    :host, :root, :scope, :where(*), ::slotted(*) {
        --tm-bg-alpha: inherit;
        --tm-chroma: inherit;

        //
        --tm-origin: inherit;
        --tm-shade: inherit;
        --tm-adapt: inherit;

        //
        --tm-cr: inherit;
        --tm-ac: inherit;

        //
        --tm-bg-color: inherit;
        --tm-color: inherit;

        //
        --rv-bg-color: inherit;
        --rv-color: inherit;
    }
};

//
@layer u2-color-base {
    :root, :where(html) {
        //
        & {
            --tm-chroma: 0;
            --tm-bg-alpha: 0;
            --tm-alpha: 1;
        };

        //
        &, :where(body) {
            & { --tm-bg-alpha: 0; };
            @include cm.accent;
            @include cm.hl-col;
        };

        //
        & { --tm-scheme: 0; color-scheme: light; };
        @media (prefers-color-scheme: light) { --tm-scheme: 0; color-scheme: light; }
        @media (prefers-color-scheme: dark)  { --tm-scheme: 1; color-scheme: dark; }
    };

    //
    body, :root, :scope,
    :where(*[data-scheme]),
    :host(*[data-scheme])
    {
        --tm-adapt: color-mix(in oklch, var(--tm-cr, currentColor) calc(100% * var(--tm-chroma, 0)), var(--tm-ac, currentColor));
        --tm-bg-base: color-mix(in oklch, var(--tm-cr, currentColor) calc(100% * var(--tm-chroma, 0)), var(--tm-ac, currentColor));//var(--tm-adapt, currentColor);
        --tm-bg-color: oklch(from var(--tm-bg-base, currentColor) l c h / var(--tm-bg-alpha, 0));
    }

    //
    :host, :scope, :root, *::selection, *::before, *::after, *::selection, :where(*), :host ::slotted(*)
    {
        //
        & {
            --rv-bg-color: color-mix(in oklch, var(--tm-shade, black) calc(var(--hl-co, 0) * 1%), var(--tm-bg-color, white));
            --rv-color: var(--tm-color, black);

            // achromatic
            --tm-ac-dark: oklch(from var(--tm-origin, currentColor) 0.01 0.01 h);
            --tm-ac-light: oklch(from var(--tm-origin, currentColor) 0.99 0.01 h);

            // colorful
            --tm-cr-dark : oklch(from var(--tm-origin, currentColor) min(min(calc(1.0 - l), l), 0.4) min(c, 0.8) h);
            --tm-cr-light: oklch(from var(--tm-origin, currentColor) max(max(calc(1.0 - l), l), 0.6) min(c, 0.8) h);
        }

        //
        & {
            @include cm.hl-col;
            @include cm.bg-dep;
        }
    }
};

//
@layer u2-color-transparent {
    :host([data-transparent]:not([data-transparent="false"])),
    *[data-transparent]:not([data-transparent="false"])
    { @include cm.transp; };
};

//
@layer u2-color-hl {
    :where([data-highlight-hover], [data-highlight]) *:not([data-highlight], [data-highlight-hover])
    { @include cm.hl-col; };
};

//
@layer u2-color-theme {
    :host, :root, :scope, body
    {
        @include cm.tm-dep("--tm-hi", "var(--tm-l-hi)", "var(--tm-d-hi)");
        @include cm.tm-dep("--tm-lo", "var(--tm-l-lo)", "var(--tm-d-lo)");
        @include cm.tm-dep-comp;
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="dark"], :host([data-theme="dark"])
    {
        & { --tm-scheme: 1; color-scheme: dark; };
        @include cm.tm-dep("--tm-hi", "var(--tm-l-hi)", "var(--tm-d-hi)");
        @include cm.tm-dep("--tm-lo", "var(--tm-l-lo)", "var(--tm-d-lo)");
        @include cm.tm-dep-comp;
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="light"], :host([data-theme="light"])
    {
        & { --tm-scheme: 0; color-scheme: light; };
        @include cm.tm-dep("--tm-hi", "var(--tm-l-hi)", "var(--tm-d-hi)");
        @include cm.tm-dep("--tm-lo", "var(--tm-l-lo)", "var(--tm-d-lo)");
        @include cm.tm-dep-comp;
    }

    // may be used for fixed theming, without dependency
    // unused in nested elements, currently
    *[data-theme="native"], :host([data-theme="native"]),
    *[data-theme="default"], :host([data-theme="default"])
    {   // adaptive
        & { color-scheme: normal; };
        @media (prefers-color-scheme: light) { --tm-scheme: 0; color-scheme: light; };
        @media (prefers-color-scheme: dark)  { --tm-scheme: 1; color-scheme: dark; };

        //
        @include cm.tm-dep("--tm-hi", "var(--tm-l-hi)", "var(--tm-d-hi)");
        @include cm.tm-dep("--tm-lo", "var(--tm-l-lo)", "var(--tm-d-lo)");
        @include cm.tm-dep-comp;
    }
};

//
@layer u2-color-mod {
    :host([data-scheme="base"]), *[data-scheme="base"]                                  { @include cm.base;           & { --tm-chroma: 1; --tm-bg-alpha: 1; }; } // deprecated...
    :host([data-scheme="dynamic"]), *[data-scheme="dynamic"]                            { @include cm.dynamic;        & { --tm-chroma: 1; --tm-bg-alpha: 1; }; }
    :host([data-scheme="accent"]), *[data-scheme="accent"]                              { @include cm.accent;         & { --tm-chroma: 1; --tm-bg-alpha: 1; }; } // deprecated...
    :host([data-scheme="solid"]), *[data-scheme="solid"]                                { @include cm.solid;          & { --tm-chroma: 0; --tm-bg-alpha: 1; }; }
    :host([data-scheme="inverse"]), *[data-scheme="inverse"]                            { @include cm.inverse;        & { --tm-chroma: 0; --tm-bg-alpha: 1; }; }
    :host([data-scheme="accent-inverse"]), *[data-scheme="accent-inverse"]              { @include cm.accent-inverse; & { --tm-chroma: 1; --tm-bg-alpha: 1; }; }
    :host([data-scheme="transparent"]), *[data-scheme="transparent"]                    { @include cm.accent;         & { --tm-chroma: 1; --tm-bg-alpha: 0; }; }
    :host([data-scheme="solid-transparent"]), *[data-scheme="solid-transparent"]        { @include cm.solid;          & { --tm-chroma: 0; --tm-bg-alpha: 0; }; }
    :host([data-scheme="dynamic-transparent"]), *[data-scheme="dynamic-transparent"]    { @include cm.dynamic;        & { --tm-chroma: 1; --tm-bg-alpha: 0; }; }
};

//
@layer u2-color-attr {
    @function hl-logic($value) { @return "calc(#{$value} * 3)"; };

    //
    @include cm.attr-based(":host([data-highlight]), *[data-highlight]", "--hl-co-state", "data-highlight", "number", meta.get-function("hl-logic"), 0);
    @include cm.attr-based(":host([data-chroma]), *[data-chroma]", "--tm-chroma", "data-chroma", "number", null, 0);
    @include cm.attr-based(":host([data-alpha]), *[data-alpha]", "--tm-bg-alpha", "data-alpha", "number", null, 0);

    // :host() unsupported
    @include cm.hover("*[data-highlight-hover]") {
        @include cm.attr-based("&", "--hl-co-hover", "data-highlight-hover", "number", meta.get-function("hl-logic"), 0);
    }
};

//
@layer u2-style-apply {
    :where(a, span, svg, svg path) { --theme-bg-alpha: 0; background-color: transparent; }
    :where(slot) { background-color: transparent !important; }
    :where(*[data-scheme]),
    :host(*[data-scheme])
    {
        &,
        &::before, &::after, &::selection,
        *::before, *::after, *::selection, :where(*), &::slotted(*)
        {   //
            transition: var(--hl-trans-property) var(--hl-trans-duration) var(--hl-trans-mode);
            background-color: var(--rv-bg-color, currentColor);
            accent-color: var(--rv-color, currentColor); //--tm-cr
            color: var(--rv-color, currentColor);
            stroke: var(--rv-color, currentColor);

            // scrollbar styling
            scrollbar-color: var(--rv-color, currentColor);
            scrollbar-width: thin;
        }

        //
        &::selection, ::selection {
            background-color: var(--rv-color, black);
            color: oklch(from var(--rv-color, black) calc(1 - l) c h / 1.0);
        }
    }
};

//
@layer u2-icon-style-fix {
    //
    ui-icon:not([icon]),
    ui-icon[icon=""]
    {
        visibility: hidden !important;
        content-visibility: hidden !important;
        opacity: 0 !important;
    }

    //
    :host(ui-icon),
    :where(ui-icon)
    {
        --mask-image: linear-gradient(#0000, #0000);

        //
        background-size: contain;
        background-clip: content-box;
        background-attachment: local;
        background-repeat: no-repeat;
        background-origin: content-box;
        background-color: var(--rv-color, currentColor);
        color: var(--rv-color, currentColor);

        //
        mask-image: var(--mask-image, linear-gradient(#0000, #0000));
        mask-origin: content-box;
        mask-repeat: no-repeat;
        mask-clip: content-box;
        mask-mode: alpha;
        mask-size: contain;
        mask-position: center;
    }
};
