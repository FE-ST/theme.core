//
@use "sass:string";
@use "sass:meta";

//
@use "./LogicFb" as flg;
@use "./LogicSign" as slg;

//
$upMod: var(--theme-up-mod);
$downMod: var(--theme-down-mod);
$chromaMod: var(--theme-chroma-mod);
$baseColor: var(--theme-accent-color);

//
@function inv-mul($a, $b) {
    @return "calc(1.0 - calc(1.0 - #{$a}) * #{$b})";
}

//
@function theme-mod-up($base, $percent) {
    @return color-mix(in oklch, $base calc(100% - $percent), $upMod);
}

//
@function theme-mod-down($base, $percent) {
    @return color-mix(in oklch, $base calc(100% - $percent), $downMod);
}

//
@function theme-mod-chroma($base, $percent) {
    @return color-mix(in oklch, $base calc(100% - $percent), $chromaMod);
}

//
$surfaceColor: theme-mod-up(#{$baseColor}, 96%);
$glyphColor: theme-mod-down(#{$baseColor}, 98%);
$accentColor: theme-mod-down(#{$baseColor}, 92%);
$chromaColor: theme-mod-chroma(#{$baseColor}, 80%);

//
@mixin theme-dependent($property, $light, $dark, $fb: var(--theme-is-dark)) {
    & { #{$property}: color-mix(in oklch, #{$light} calc(100% * #{var(--theme-is-dark)}), #{$dark}); }

    //
    @supports(color: light-dark(white, black)) {
        #{$property}: light-dark(#{$light}, #{$dark});
    }
}

//
@mixin accent-mod($effect: 1) {
    & {
        --effect: $effect;
        --current-surface-color: #{theme-mod-down(var(--theme-surface-color), calc(1% * var(--effect, 1)))};
    }
}

//
@mixin contrast($name, $from, $alpha: 1) {
    //#{$name}: string.unquote("oklch(from #{$from} calc(#{slg.sign(calc(l - 0.6))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})");
    @supports     (opacity: sign(0.5)) { #{$name}: string.unquote("oklch(from #{$from} calc(#{slg.sign(calc(l - 0.6))} * 0.9 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: string.unquote("oklch(from #{$from} calc(#{flg.sign(calc(l - 0.6))} * 0.9 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
}

//
@mixin contrast-inverse($name, $from, $alpha: 1) {
    //#{$name}: string.unquote("oklch(from #{$from} calc(#{slg.sign(calc(0.6 - l))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})");
    @supports     (opacity: sign(0.5)) { #{$name}: string.unquote("oklch(from #{$from} calc(#{slg.sign(calc(0.6 - l))} * 0.9 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: string.unquote("oklch(from #{$from} calc(#{flg.sign(calc(0.6 - l))} * 0.9 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
}

//
@mixin attr-based(
    $selector: "&",
    $property,
    $attr,
    $type: "number",
    $logic: null,
    $default: 1,
    $test: "opacity"
) {
    //
    @supports (#{$test}: attr(#{$attr} #{$type}, #{$default})) {
        $value    : attr(#{$attr} #{$type}, #{$default});
        $withLogic: if($logic != null, meta.call($logic, $value), $value);

        //
        #{$selector} { #{$property}: #{$withLogic}; };
    }

    // fallback support
    @supports not (#{$test}: attr(#{$attr} #{$type}, #{$default})) {
        @property --#{$attr}-attr { initial-value: #{$default}; inherits: true; syntax: "<#{$type}>"; };

        //
        $value    : var(--#{$attr}-attr, #{$default});
        $withLogic: if($logic != null, meta.call($logic, $value), $value);

        //
        #{$selector} { #{$property}: #{$withLogic}; };
    }
}

//
@mixin hover ($selector: "&") {
    //
    @media screen and ((hover: hover) or (pointer: fine)) {
        #{$selector}:hover {
            @content;
        }
    }

    //
    @media screen and ((hover: none) and (pointer: coarse)) {
        #{$selector}:action {
            @content;
        }
    }
}
