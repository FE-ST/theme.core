//
@use "sass:string";
@use "sass:meta";

//
@use "./Contrast" as c;
@use "./Component" as cm;
@use "./Theme" as tm;

//
@mixin transp { & { --tm-bg-alpha: 0; }; };
@mixin bg-dep { @include c.in-contrast("--tm-color", "var(--tm-bg-color, var(--rv-bg-color, transparent))", "1", "calc((1 - var(--tm-bg-alpha, 0)) * l * 1.2)"); };

//
@mixin solid {
    // origin color is base, but with theme tone
    @include tm.tm-col-dep("--tm-cr", "var(--tm-cr-light)", "var(--tm-cr-dark)");

    // high-up version of origin color
    & { --tm-ac: #{cm.tm-hi(var(--tm-origin, currentColor), 96%)}; }
};

//
@mixin inverse {
    // origin color is base, but with theme tone
    @include tm.tm-col-dep("--tm-cr", "var(--tm-cr-dark)", "var(--tm-cr-light)");

    // low-up version of origin color
    & { --tm-ac: #{cm.tm-lo(var(--tm-origin, currentColor), 80%)}; }
};

// use practically same values by origin color
// achromatic value is tone version of origin color
@mixin accent {
    & { --tm-cr: var(--tm-origin, currentColor); };
    @include tm.tm-col-dep("--tm-ac", "var(--tm-cr-light)", "var(--tm-cr-dark)");
};

// dynamic now deprecated, now works through JS, initial value is native
@mixin dynamic {
    & { --tm-bg-base: var(--tm-adapt, color-mix(in oklch, var(--tm-cr, currentColor) calc(100% * var(--tm-chroma, 0)), var(--tm-ac, currentColor))); };
};

//
@mixin accent-inverse {
    @include accent;
    @include c.in-contrast("--tm-ac", "var(--tm-origin, currentColor)", "var(--tm-bg-alpha, 0)", "0.4");
};

// background-based
@mixin base {
    & { --tm-cr: var(--tm-origin, currentColor); };
    & { --tm-ac: var(--tm-origin, currentColor); };
};
