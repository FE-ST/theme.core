//
@use "sass:string";
@use "sass:meta";

//
@mixin attr-based(
    $selector: "&",
    $property,
    $attr,
    $type: "number",
    $logic: null,
    $default: 1,
    $test: "opacity"
) {
    @property --#{$attr}-attr { initial-value: #{$default}; inherits: true; syntax: "<#{$type}>"; };
    @supports (#{$test}: attr(#{$attr} #{$type}, #{$default})) {
        #{$selector} { --#{$attr}-attr: attr(#{$attr} #{$type}, #{$default}); };
    };

    //
    #{$selector} {
        $value: var(--#{$attr}-attr, #{$default});
        #{$property}: #{ if($logic != null, meta.call($logic, $value), $value) };
    };
};

//
@mixin contrast($name, $from, $alpha: 1, $chromaReduce: 0.4) {
    & { #{$name}: string.unquote("oklch(from #{$from} calc( clamp(-1, calc((l - 0.6) * 100000), 1) * 0.4 + 0.5) clamp(0.01, calc(c * #{$chromaReduce}), 0.9) h / #{$alpha})"); };
};

//
@mixin in-contrast($name, $from, $alpha: 1, $chromaReduce: 0.4) {
    & { #{$name}: string.unquote("oklch(from #{$from} calc( clamp(-1, calc((0.6 - l) * 100000), 1) * 0.4 + 0.5) clamp(0.01, calc(c * #{$chromaReduce}), 0.9) h / #{$alpha})"); };
};

//
@mixin hover ($selector: "&") {
    @media screen and ((hover: hover) or (pointer: fine)) { #{$selector}:hover { @content; }; };
    @media screen and ((hover: none) and (pointer: coarse)) { #{$selector}:action { @content; }; };
};

//
@mixin tm-dep-comp() {
    & {
        --tm-l-lo: color-mix(in oklch, var(--tm-ac-dark) 90%, var(--tm-cr, currentColor));
        --tm-d-lo: color-mix(in oklch, var(--tm-ac-light) 90%, var(--tm-cr, currentColor));
        --tm-l-hi: color-mix(in oklch, var(--tm-ac-light) 98%, var(--tm-cr, currentColor));
        --tm-d-hi: color-mix(in oklch, var(--tm-ac-dark) 98%, var(--tm-cr, currentColor));
    }

    //
    @include tm-dep("--tm-hi", "var(--tm-l-hi)", "var(--tm-d-hi)");
    @include tm-dep("--tm-lo", "var(--tm-l-lo)", "var(--tm-d-lo)");
};

//
@mixin transp { & { --tm-bg-alpha: 0; }; };
@mixin bg-dep { @include in-contrast("--tm-color", "var(--tm-bg-color, var(--rv-bg-color, currentColor))", "1", "calc((1 - var(--tm-bg-alpha, 0)) * l * 1.2)"); };
@mixin tm-dep($property, $light, $dark, $fb: var(--tm-scheme)) {
    & { #{$property}: color-mix(in oklch, #{$light} calc(100% * #{var(--tm-scheme)}), #{$dark}); }

    //
    @supports(color: light-dark(white, black)) {
        #{$property}: light-dark(#{$light}, #{$dark});
    }
};

//
@mixin hl-col {
    @include in-contrast("--tm-shade", "var(--tm-bg-color, currentColor)", "1", "calc((1 - var(--tm-bg-alpha, 0)) * l * 4)");

    //
    & {
        --hl-trans-mode: linear;
        --hl-trans-duration: 0.2s;
        --hl-trans-property: --hl-co;
        --hl-co-state: 0.0;
        --hl-co-hover: var(--hl-co-state, 0.0);
        --hl-co: max(max(var(--hl-co-state, 0), var(--hl-co-hover, 0)), 0);
    };

    //
    &[data-highlight-op="min"],
    & [data-highlight-op="min"] {
        --hl-co: max(min(var(--hl-co-state, 0), var(--hl-co-hover, 0)), 0);
    };
};



//
@function tm-hi($base, $percent) {
    @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-hi, white));
};

//
@function tm-lo($base, $percent) {
    @return color-mix(in oklch, #{$base} calc(100% - #{$percent}), var(--tm-lo, black));
};

//
@mixin solid {
    // origin color is base, but with theme tone
    @include tm-dep("--tm-cr", "var(--tm-cr-light)", "var(--tm-cr-dark)");

    // high-up version of origin color
    & { --tm-ac: #{tm-hi(var(--tm-origin, currentColor), 96%)}; }
};

//
@mixin inverse {
    // origin color is base, but with theme tone
    @include tm-dep("--tm-cr", "var(--tm-cr-dark)", "var(--tm-cr-light)");

    // low-up version of origin color
    & { --tm-ac: #{tm-lo(var(--tm-origin, currentColor), 80%)}; }
};

// use practically same values by origin color
// achromatic value is tone version of origin color
@mixin accent {
    & { --tm-cr: var(--tm-origin, currentColor); };
    @include tm-dep("--tm-ac", "var(--tm-cr-light)", "var(--tm-cr-dark)");
};

// dynamic now deprecated, now works through JS, initial value is native
@mixin dynamic { --tm-bg-base: var(--tm-adapt, color-mix(in oklch, var(--tm-cr, currentColor) calc(100% * var(--tm-chroma, 0)), var(--tm-ac, currentColor))); };
@mixin accent-inverse {
    @include accent;
    @include in-contrast("--tm-ac", "var(--tm-origin, currentColor)", "var(--tm-bg-alpha, 0)", "0.4");
};

// background-based
@mixin base {
    & { --tm-cr: var(--tm-origin, currentColor); };
    & { --tm-ac: var(--tm-origin, currentColor); };
};
